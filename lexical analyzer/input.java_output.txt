<KEYWORD, class>
<ID, Test>
<PARENS, {>
<KEYWORD, static>
<VTYPE, void>
<ID, stack_push>
<PARENS, (>
<ID, Stack>
<COMPARISON, <>
<ID, Integer>
<COMPARISON, >>
<ID, stack>
<PARENS, )>
<PARENS, {>
<KEYWORD, for>
<PARENS, (>
<VTYPE, int>
<ID, i>
<ASSIGN, =>
<INT, 0>
<SEMI, ;>
<ID, i>
<COMPARISON, <>
<INT, 5>
<SEMI, ;>
<ID, i>
<ARITHMETIC, +>
<ARITHMETIC, +>
<PARENS, )>
<PARENS, {>
<ID, stack>
<SYMBOL, .>
<ID, push>
<PARENS, (>
<ID, i>
<PARENS, )>
<SEMI, ;>
<PARENS, }>
<PARENS, }>
<KEYWORD, static>
<VTYPE, void>
<ID, stack_pop>
<PARENS, (>
<ID, Stack>
<COMPARISON, <>
<ID, Integer>
<COMPARISON, >>
<ID, stack>
<PARENS, )>
<PARENS, {>
<ID, System>
<SYMBOL, .>
<ID, out>
<SYMBOL, .>
<ID, println>
<PARENS, (>
<LITERAL, "Pop Operation:">
<PARENS, )>
<SEMI, ;>
<KEYWORD, for>
<PARENS, (>
<VTYPE, int>
<ID, i>
<ASSIGN, =>
<INT, 0>
<SEMI, ;>
<ID, i>
<COMPARISON, <>
<INT, 5>
<SEMI, ;>
<ID, i>
<ARITHMETIC, +>
<ARITHMETIC, +>
<PARENS, )>
<PARENS, {>
<ID, Integer>
<ID, y>
<ASSIGN, =>
<PARENS, (>
<ID, Integer>
<PARENS, )>
<ID, stack>
<SYMBOL, .>
<ID, pop>
<PARENS, (>
<PARENS, )>
<SEMI, ;>
<ID, System>
<SYMBOL, .>
<ID, out>
<SYMBOL, .>
<ID, println>
<PARENS, (>
<ID, y>
<PARENS, )>
<SEMI, ;>
<PARENS, }>
<PARENS, }>
<KEYWORD, static>
<VTYPE, void>
<ID, stack_peek>
<PARENS, (>
<ID, Stack>
<COMPARISON, <>
<ID, Integer>
<COMPARISON, >>
<ID, stack>
<PARENS, )>
<PARENS, {>
<ID, Integer>
<ID, element>
<ASSIGN, =>
<PARENS, (>
<ID, Integer>
<PARENS, )>
<ID, stack>
<SYMBOL, .>
<ID, peek>
<PARENS, (>
<PARENS, )>
<SEMI, ;>
<ID, System>
<SYMBOL, .>
<ID, out>
<SYMBOL, .>
<ID, println>
<PARENS, (>
<LITERAL, "Element on stack top: ">
<ARITHMETIC, +>
<ID, element>
<PARENS, )>
<SEMI, ;>
<PARENS, }>
<KEYWORD, static>
<VTYPE, void>
<ID, stack_search>
<PARENS, (>
<ID, Stack>
<COMPARISON, <>
<ID, Integer>
<COMPARISON, >>
<ID, stack>
<COMMA, ,>
<VTYPE, int>
<ID, element>
<PARENS, )>
<PARENS, {>
<ID, Integer>
<ID, pos>
<ASSIGN, =>
<PARENS, (>
<ID, Integer>
<PARENS, )>
<ID, stack>
<SYMBOL, .>
<ID, search>
<PARENS, (>
<ID, element>
<PARENS, )>
<SEMI, ;>
<KEYWORD, if>
<PARENS, (>
<ID, pos>
<COMPARISON, ==>
<INT, -1>
<PARENS, )>
<ID, System>
<SYMBOL, .>
<ID, out>
<SYMBOL, .>
<ID, println>
<PARENS, (>
<LITERAL, "Element not found">
<PARENS, )>
<SEMI, ;>
<KEYWORD, else>
<ID, System>
<SYMBOL, .>
<ID, out>
<SYMBOL, .>
<ID, println>
<PARENS, (>
<LITERAL, "Element is found at position: ">
<ARITHMETIC, +>
<ID, pos>
<PARENS, )>
<SEMI, ;>
<PARENS, }>
<KEYWORD, public>
<KEYWORD, static>
<VTYPE, void>
<KEYWORD, main>
<PARENS, (>
<VTYPE, String>
<PARENS, [>
<PARENS, ]>
<KEYWORD, args>
<PARENS, )>
<PARENS, {>
<ID, Stack>
<COMPARISON, <>
<ID, Integer>
<COMPARISON, >>
<ID, stack>
<ASSIGN, =>
<KEYWORD, new>
<ID, Stack>
<COMPARISON, <>
<ID, Integer>
<COMPARISON, >>
<PARENS, (>
<PARENS, )>
<SEMI, ;>
<ID, stack_push>
<PARENS, (>
<ID, stack>
<PARENS, )>
<SEMI, ;>
<ID, stack_pop>
<PARENS, (>
<ID, stack>
<PARENS, )>
<SEMI, ;>
<ID, stack_push>
<PARENS, (>
<ID, stack>
<PARENS, )>
<SEMI, ;>
<ID, stack_peek>
<PARENS, (>
<ID, stack>
<PARENS, )>
<SEMI, ;>
<ID, stack_search>
<PARENS, (>
<ID, stack>
<COMMA, ,>
<INT, 2>
<PARENS, )>
<SEMI, ;>
<ID, stack_search>
<PARENS, (>
<ID, stack>
<COMMA, ,>
<INT, 6>
<PARENS, )>
<SEMI, ;>
<PARENS, }>
<PARENS, }>
